// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pricemodel "server/server/internal/models/price"
)

// PriceService is an autogenerated mock type for the PriceService type
type PriceService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, rec
func (_m *PriceService) Create(ctx context.Context, rec pricemodel.CreatePrice) error {
	ret := _m.Called(ctx, rec)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pricemodel.CreatePrice) error); ok {
		r0 = rf(ctx, rec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, rec
func (_m *PriceService) Get(ctx context.Context, rec pricemodel.GetPrice) (pricemodel.Prices, error) {
	ret := _m.Called(ctx, rec)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 pricemodel.Prices
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pricemodel.GetPrice) (pricemodel.Prices, error)); ok {
		return rf(ctx, rec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pricemodel.GetPrice) pricemodel.Prices); ok {
		r0 = rf(ctx, rec)
	} else {
		r0 = ret.Get(0).(pricemodel.Prices)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pricemodel.GetPrice) error); ok {
		r1 = rf(ctx, rec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, rec
func (_m *PriceService) Update(ctx context.Context, rec pricemodel.UpdatePrice) error {
	ret := _m.Called(ctx, rec)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pricemodel.UpdatePrice) error); ok {
		r0 = rf(ctx, rec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPriceService creates a new instance of PriceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceService {
	mock := &PriceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
